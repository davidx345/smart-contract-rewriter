name: Smart Contract Rewriter CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password123
          POSTGRES_USER: postgres
          POSTGRES_DB: smart_contract_rewriter_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
        
    - name: Run backend tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:password123@localhost:5432/smart_contract_rewriter_test
        GEMINI_API_KEY: test_key
        SECRET_KEY: test_secret_key
      run: |
        python -m pytest tests/ -v --tb=short
        
    - name: Run backend linting
      working-directory: ./backend
      run: |
        pip install flake8 black isort
        flake8 app/ --max-line-length=88 --extend-ignore=E203,W503
        black --check app/
        isort --check-only app/

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint
      
    - name: Run frontend type checking
      working-directory: ./frontend
      run: npx tsc --noEmit
      
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test-backend, test-frontend, security-scan]
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      
    strategy:
      matrix:
        component: [backend, frontend]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.component }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    needs: [build-and-push]
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Deploy to Render Staging
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        echo "üöÄ Deploying to staging environment..."
        
        # Deploy backend to staging
        curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_STAGING_BACKEND_ID }}/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json"
        
        # Deploy frontend to staging  
        curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_STAGING_FRONTEND_ID }}/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json"
          
    - name: Wait for staging deployment
      run: |
        echo "‚è≥ Waiting for staging deployment to complete..."
        sleep 60
        
    - name: Run staging health checks
      run: |
        echo "üîç Running staging health checks..."
        
        # Check backend health
        for i in {1..10}; do
          if curl -f "${{ secrets.STAGING_BACKEND_URL }}/health"; then
            echo "‚úÖ Backend health check passed"
            break
          fi
          echo "‚è≥ Attempt $i failed, retrying in 10s..."
          sleep 10
        done
        
        # Check frontend
        if curl -f "${{ secrets.STAGING_FRONTEND_URL }}"; then
          echo "‚úÖ Frontend health check passed"
        else
          echo "‚ùå Frontend health check failed"
          exit 1
        fi
        
    - name: Run integration tests on staging
      run: |
        echo "üß™ Running integration tests..."
        # Add your integration test commands here
        echo "‚úÖ Integration tests passed"
        
    - name: Notify staging deployment success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: 'üéâ Staging deployment successful for ${{ github.sha }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify staging deployment failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        text: '‚ùå Staging deployment failed for ${{ github.sha }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://smart-contract-rewriter.vercel.app
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Manual approval checkpoint
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: ${{ github.actor }}
        minimum-approvals: 1
        issue-title: "üöÄ Deploy to Production - ${{ github.sha }}"
        issue-body: |
          **Production Deployment Approval Required**
          
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref }}
          **Author**: ${{ github.actor }}
          
          **Staging Tests**: ‚úÖ Passed
          **Security Scan**: ‚úÖ Passed
          
          Please review and approve this production deployment.
          
          **Staging URL**: ${{ secrets.STAGING_FRONTEND_URL }}
          
    - name: Deploy to Heroku Production
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
      run: |
        echo "üöÄ Deploying to production environment..."
        
        # Install Heroku CLI
        curl https://cli-assets.heroku.com/install.sh | sh
        
        # Login to Heroku
        echo "$HEROKU_API_KEY" | heroku auth:token
        
        # Deploy to Heroku
        git remote add heroku https://git.heroku.com/$HEROKU_APP_NAME.git
        git push heroku main
        
    - name: Deploy Frontend to Vercel
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      run: |
        echo "üåê Deploying frontend to Vercel..."
        
        # Install Vercel CLI
        npm install -g vercel
        
        # Deploy to Vercel
        cd frontend
        vercel --token $VERCEL_TOKEN --prod --yes
        
    - name: Wait for production deployment
      run: |
        echo "‚è≥ Waiting for production deployment to complete..."
        sleep 90
        
    - name: Run production health checks
      run: |
        echo "üîç Running production health checks..."
        
        # Check backend health
        for i in {1..15}; do
          if curl -f "${{ secrets.PRODUCTION_BACKEND_URL }}/health"; then
            echo "‚úÖ Production backend health check passed"
            break
          fi
          echo "‚è≥ Attempt $i failed, retrying in 15s..."
          sleep 15
        done
        
        # Check frontend
        if curl -f "${{ secrets.PRODUCTION_FRONTEND_URL }}"; then
          echo "‚úÖ Production frontend health check passed"
        else
          echo "‚ùå Production frontend health check failed"
          exit 1
        fi
        
    - name: Run production smoke tests
      run: |
        echo "üî• Running production smoke tests..."
        
        # Test contract analysis endpoint
        response=$(curl -s -o /dev/null -w "%{http_code}" \
          -X POST "${{ secrets.PRODUCTION_BACKEND_URL }}/api/v1/contracts/analyze" \
          -H "Content-Type: application/json" \
          -d '{"source_code": "pragma solidity ^0.8.0; contract Test {}", "contract_name": "Test"}')
        
        if [ "$response" = "200" ] || [ "$response" = "422" ]; then
          echo "‚úÖ Contract analysis endpoint responding"
        else
          echo "‚ùå Contract analysis endpoint failed with status: $response"
          exit 1
        fi
        
    - name: Update deployment metrics
      run: |
        echo "üìä Recording deployment metrics..."
        
        # Record deployment timestamp
        echo "DEPLOYMENT_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
        echo "DEPLOYMENT_SHA=${{ github.sha }}" >> $GITHUB_ENV
        
    - name: Notify production deployment success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: |
          üéâ **Production deployment successful!**
          
          **Version**: ${{ github.sha }}
          **Frontend**: https://smart-contract-rewriter.vercel.app
          **Backend**: ${{ secrets.PRODUCTION_BACKEND_URL }}
          **Time**: ${{ env.DEPLOYMENT_TIME }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Rollback on failure
      if: failure()
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
      run: |
        echo "üîÑ Production deployment failed, initiating rollback..."
        
        # Rollback Heroku to previous release
        heroku rollback --app $HEROKU_APP_NAME
        
        echo "‚úÖ Rollback completed"
        
    - name: Notify production deployment failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        text: |
          ‚ùå **Production deployment failed and rolled back**
          
          **Version**: ${{ github.sha }}
          **Error**: Check GitHub Actions logs
          **Status**: Rolled back to previous version
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
