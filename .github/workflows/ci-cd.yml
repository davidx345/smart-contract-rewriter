name: 🚀 Backend Microservices CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths: ['microservices/**', 'scripts/**', '.github/workflows/ci-cd.yml']
  pull_request:
    branches: [ main ]
    paths: ['microservices/**', 'scripts/**']
  workflow_dispatch:
    inputs:
      deployment_strategy:
        description: 'Deployment strategy'
        required: true
        default: 'unified'
        type: choice
        options:
        - unified
        - separate-services
        
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Stage 1: Test Microservices
  test:
    name: 🧪 Test Microservices
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass123
          POSTGRES_USER: testuser
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📦 Install Microservices Dependencies
      working-directory: ./microservices
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
        
    - name: 🧪 Test Unified Main API
      working-directory: ./microservices
      env:
        DATABASE_URL: postgresql://testuser:testpass123@localhost:5432/test_db
        GEMINI_API_KEY: test_key
        SECRET_KEY: test_secret_key
      run: |
        # Start the unified API in background
        python unified_main.py &
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health
        
        # Test authentication
        curl -X POST http://localhost:8000/api/v1/auth/register \
          -H "Content-Type: application/json" \
          -d '{"email":"test@test.com","password":"password","full_name":"Test User"}'
        
        echo "✅ Microservices tests passed"
        
    - name: 🔍 Code Quality Check
      working-directory: ./microservices
      run: |
        pip install flake8 black
        flake8 *.py --max-line-length=88 --ignore=E501
        echo "✅ Code quality check passed"

  # Stage 2: Security Scanning
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 🛡️ SAST Security Scan
      working-directory: ./backend
      run: |
        pip install safety bandit
        echo "🔍 Dependency vulnerability scan..."
        safety check || echo "Safety check completed with warnings"
        echo "🔍 Static security analysis..."
        bandit -r . -f json -o bandit-report.json || echo "Bandit scan completed"
    
    - name: 🐳 Container Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📋 Upload Security Reports
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Stage 3: Build
  build:
    name: 🏗️ Build & Push Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      
    strategy:
      matrix:
        component: [backend, frontend]
        
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔐 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🏷️ Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🏗️ Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.component }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  # Stage 4: Deploy to AWS EC2
  deploy:
    name: 🚀 Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔑 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}
    
    - name: 🚀 Deploy Microservices to EC2
      run: |
        echo "🚀 Starting microservices deployment to AWS EC2..."
        
        # Setup SSH key
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > ec2-key.pem
        chmod 600 ec2-key.pem
        
        # Create microservices deployment script
        cat > deploy-microservices.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🔄 Setting up microservices environment..."
        
        # Update system
        sudo yum update -y
        
        # Install Docker if not present
        if ! command -v docker &> /dev/null; then
          sudo yum install -y docker
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo usermod -a -G docker ec2-user
        fi
        
        # Install Docker Compose if not present
        if ! command -v docker-compose &> /dev/null; then
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
        fi
        
        # Create project directory
        mkdir -p ~/smart-contract-rewriter
        cd ~/smart-contract-rewriter
        
        # Clone or update repository
        if [ -d ".git" ]; then
          git pull origin main
        else
          git clone https://github.com/${{ github.repository }}.git .
        fi
        
        # Set environment variables
        cat > .env << ENV
        GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=postgres123
        POSTGRES_DB=smart_contract_db
        ENV
        
        echo "🛑 Stopping old containers..."
        cd microservices
        docker-compose down || true
        
        echo "🚀 Starting microservices..."
        docker-compose up -d --build
        
        echo "⏳ Waiting for services to be ready..."
        sleep 45
        
        echo "🔍 Health check..."
        # Check unified main service
        if curl -f http://localhost:8000/health; then
          echo "✅ Unified main service is healthy!"
        else
          echo "❌ Unified main service health check failed"
          exit 1
        fi
        
        # Check contract service
        if curl -f http://localhost:8001/health; then
          echo "✅ Contract service is healthy!"
        else
          echo "❌ Contract service health check failed"
          exit 1
        fi
        
        echo "✅ All microservices deployed successfully!"
        EOF
        
        # Copy deployment script to EC2
        scp -i ec2-key.pem -o StrictHostKeyChecking=no deploy-microservices.sh ec2-user@${{ secrets.EC2_HOST }}:/tmp/
        
        # Execute deployment
        ssh -i ec2-key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} "chmod +x /tmp/deploy-microservices.sh && /tmp/deploy-microservices.sh"
        
        # Cleanup
        rm -f ec2-key.pem
        
        echo "🎉 Microservices deployment completed successfully!"
    
    - name: 📊 Post-Deployment Health Check
      run: |
        echo "🔍 Running post-deployment health checks..."
        
        # Wait for services to fully stabilize
        sleep 30
        
        # Check unified main service (API Gateway)
        if curl -f "http://${{ secrets.EC2_HOST }}:8000/health"; then
          echo "✅ Unified main service health check passed"
        else
          echo "❌ Unified main service health check failed"
          exit 1
        fi
        
        # Check authentication endpoints
        if curl -f "http://${{ secrets.EC2_HOST }}:8000/api/v1/auth/health"; then
          echo "✅ Authentication service health check passed"
        else
          echo "❌ Authentication service health check failed"
          exit 1
        fi
        
        # Check contract service
        if curl -f "http://${{ secrets.EC2_HOST }}:8001/health"; then
          echo "✅ Contract service health check passed"  
        else
          echo "❌ Contract service health check failed"
          exit 1
        fi
        
        # Check API documentation
        if curl -f "http://${{ secrets.EC2_HOST }}:8000/docs"; then
          echo "✅ API documentation is accessible"
        else
          echo "⚠️ API documentation check failed (non-critical)"
        fi
        
        echo "📊 All microservices health checks completed"
    
    - name: 🔔 Deployment Notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Backend microservices deployment to AWS EC2 successful!"
          echo "🔗 Main API: http://${{ secrets.EC2_HOST }}:8000"
          echo "📚 API Docs: http://${{ secrets.EC2_HOST }}:8000/docs"
          echo "🏗️ Contract Service: http://${{ secrets.EC2_HOST }}:8001"
          echo "🌐 Frontend: Deploy separately via Vercel (see frontend-vercel.yml workflow)"
        else
          echo "❌ Backend microservices deployment failed!"
          echo "Check the logs above for error details."
        fi
      # Optional: Add Slack/email notifications here

  # Rollback capability
  rollback:
    name: 🔄 Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: deploy
    environment: production
    
    steps:
    - name: 🔑 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}
    
    - name: 🔄 Execute Rollback
      run: |
        echo "🔄 Executing emergency rollback for microservices..."
        
        # SSH to EC2 and rollback
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > ec2-key.pem
        chmod 600 ec2-key.pem
        
        ssh -i ec2-key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} "
          cd /home/ec2-user/smart-contract-rewriter
          
          # Stop current microservices
          cd microservices
          docker-compose down
          
          # Rollback to previous commit
          git checkout HEAD~1
          
          # Restart microservices with previous version
          docker-compose up -d --build
          
          echo '✅ Microservices rollback completed'
        "
        
        # Cleanup
        rm -f ec2-key.pem
        
        echo "🔄 Emergency rollback completed successfully!"
          docker-compose down
          docker-compose up -d
          echo '✅ Rollback completed'
        "
        
        rm -f ec2-key.pem
        echo "🔄 Emergency rollback completed"
