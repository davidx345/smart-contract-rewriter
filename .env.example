# Environment Configuration for Smart Contract Rewriter
# Copy this file to .env and update with your actual values
# 
# üö® IMPORTANT: Never commit the actual .env file to version control!

# =============================================================================
# üóÑÔ∏è DATABASE CONFIGURATION
# =============================================================================

# PostgreSQL Database Connection
# For local development, use a local PostgreSQL instance:
DATABASE_URL=postgresql://username:password@localhost:5432/smart_contract_db

# For AWS RDS (production example):
# DATABASE_URL=postgresql://admin:yourpassword@smart-contracts.xxxxxxxxxxxx.us-east-1.rds.amazonaws.com:5432/smart_contracts

# Alternative: Individual database components
DB_HOST=localhost
DB_PORT=5432
DB_NAME=smart_contract_db
DB_USER=postgres
DB_PASSWORD=your_secure_password

# =============================================================================
# ‚òÅÔ∏è AWS SERVICES CONFIGURATION  
# =============================================================================

# AWS Credentials (for local development only - use IAM roles in production)
AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE
AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
AWS_REGION=us-east-1

# S3 Bucket for contract storage
S3_BUCKET_NAME=smart-contract-storage-bucket

# =============================================================================
# üîê SECURITY & AUTHENTICATION
# =============================================================================

# JWT Secret Key (generate with: openssl rand -hex 32)
SECRET_KEY=your-256-bit-secret-key-here-minimum-32-characters-long-for-security
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30
REFRESH_TOKEN_EXPIRE_DAYS=7

# Password hashing settings
BCRYPT_ROUNDS=12

# =============================================================================
# ü§ñ AI & EXTERNAL SERVICES
# =============================================================================

# Google Gemini API (get from: https://ai.google.dev/)
GEMINI_API_KEY=AIzaSyC-example-api-key-get-from-google-ai-studio

# OpenAI API (alternative AI provider)
# OPENAI_API_KEY=sk-proj-example-openai-api-key

# =============================================================================
# üìß NOTIFICATION SERVICES
# =============================================================================

# Email Configuration (Gmail SMTP example)
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587
SMTP_USE_TLS=true
EMAIL_USERNAME=your-project-email@gmail.com
EMAIL_PASSWORD=your-app-specific-password
NOTIFICATION_FROM_EMAIL=noreply@smartcontractrewriter.com

# Slack Webhook for alerts (optional)
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX

# =============================================================================
# üåê MICROSERVICE URLS
# =============================================================================

# API Gateway
API_GATEWAY_URL=http://localhost:8000
API_GATEWAY_HOST=0.0.0.0
API_GATEWAY_PORT=8000

# Individual Microservices (for development)
CONTRACT_SERVICE_URL=http://localhost:8001
AI_SERVICE_URL=http://localhost:8002
AUTH_SERVICE_URL=http://localhost:8003
NOTIFICATION_SERVICE_URL=http://localhost:8004

# Production URLs (example):
# CONTRACT_SERVICE_URL=https://contract-api.smartcontractrewriter.com
# AI_SERVICE_URL=https://ai-api.smartcontractrewriter.com

# =============================================================================
# ‚ö° PERFORMANCE & CACHING
# =============================================================================

# Redis Configuration
REDIS_URL=redis://localhost:6379/0
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0
REDIS_PASSWORD=

# Rate Limiting
RATE_LIMIT_REQUESTS=100
RATE_LIMIT_WINDOW_SECONDS=60

# Request timeouts (seconds)
HTTP_TIMEOUT=30
AI_SERVICE_TIMEOUT=120

# =============================================================================
# üèÉ‚Äç‚ôÇÔ∏è APPLICATION SETTINGS
# =============================================================================

# Environment
ENVIRONMENT=development
DEBUG=true
LOG_LEVEL=INFO

# CORS Settings
ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
ALLOWED_METHODS=GET,POST,PUT,DELETE,OPTIONS
ALLOWED_HEADERS=*

# File Upload Limits
MAX_FILE_SIZE=10485760  # 10MB in bytes
MAX_CONTRACT_SIZE=1048576  # 1MB for contract files

# =============================================================================
# ÔøΩ OPTIONAL INTEGRATIONS
# =============================================================================

# GitHub Integration (for contract repository features)
# GITHUB_CLIENT_ID=your_github_oauth_app_client_id
# GITHUB_CLIENT_SECRET=your_github_oauth_app_client_secret

# Analytics (if using Google Analytics)
# GA_TRACKING_ID=G-XXXXXXXXXX

# Error Tracking (if using Sentry)
# SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id

# =============================================================================
# üöÄ QUICK SETUP GUIDE
# =============================================================================
#
# 1. COPY THIS FILE:
#    cp .env.example .env
#
# 2. REQUIRED SETTINGS (minimum to run locally):
#    - DATABASE_URL: Set up local PostgreSQL
#    - SECRET_KEY: Generate with 'openssl rand -hex 32'
#    - GEMINI_API_KEY: Get free key from Google AI Studio
#
# 3. OPTIONAL BUT RECOMMENDED:
#    - REDIS_URL: For caching (run 'docker run -d -p 6379:6379 redis')
#    - Email settings: For notifications
#
# 4. PRODUCTION DEPLOYMENT:
#    - Use environment variables or secrets management
#    - Enable SSL/TLS for all database connections
#    - Use IAM roles instead of AWS access keys
#    - Set DEBUG=false and ENVIRONMENT=production
#
# 5. TESTING:
#    - Use separate database for tests
#    - Mock external APIs during testing
#
# For detailed setup instructions, see: docs/setup-guide.md