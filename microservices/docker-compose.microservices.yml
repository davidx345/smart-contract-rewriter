version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15
    container_name: solivolt_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password_123
      POSTGRES_DB: solivolt
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - solivolt_network

  redis:
    image: redis:7-alpine
    container_name: solivolt_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass "redis_password_123"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password_123", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - solivolt_network

  # Microservices
  api-gateway:
    build:
      context: ./microservices/api-gateway
      dockerfile: Dockerfile
    container_name: solivolt_api_gateway
    ports:
      - "8000:8000"
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8001
      - CONTRACT_SERVICE_URL=http://contract-service:8002
      - AI_SERVICE_URL=http://ai-service:8003
      - NOTIFICATION_SERVICE_URL=http://notification-service:8004
    depends_on:
      - auth-service
      - contract-service
      - ai-service
      - notification-service
    restart: unless-stopped
    networks:
      - solivolt_network

  auth-service:
    build:
      context: ./microservices/auth-service
      dockerfile: Dockerfile
    container_name: solivolt_auth_service
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres_password_123@postgres:5432/solivolt
      - REDIS_URL=redis://:redis_password_123@redis:6379/0
      - SECRET_KEY=super-secret-jwt-key-microservices-2024
      - DEBUG=false
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - solivolt_network

  contract-service:
    build:
      context: ./microservices/contract-service
      dockerfile: Dockerfile
    container_name: solivolt_contract_service
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres_password_123@postgres:5432/solivolt
      - REDIS_URL=redis://:redis_password_123@redis:6379/0
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - solivolt_network

  ai-service:
    build:
      context: ./microservices/ai-service
      dockerfile: Dockerfile
    container_name: solivolt_ai_service
    ports:
      - "8003:8003"
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_MODEL=gemini-1.5-flash
      - REDIS_URL=redis://:redis_password_123@redis:6379/0
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - solivolt_network

  notification-service:
    build:
      context: ./microservices/notification-service
      dockerfile: Dockerfile
    container_name: solivolt_notification_service
    ports:
      - "8004:8004"
    environment:
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - EMAIL_FROM=${EMAIL_FROM:-noreply@solivolt.com}
      - REDIS_URL=redis://:redis_password_123@redis:6379/0
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - solivolt_network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: solivolt_frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
    depends_on:
      - api-gateway
    restart: unless-stopped
    networks:
      - solivolt_network

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: solivolt_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - solivolt_network

  grafana:
    image: grafana/grafana:latest
    container_name: solivolt_grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - solivolt_network

  node-exporter:
    image: prom/node-exporter:latest
    container_name: solivolt_node_exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - solivolt_network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  solivolt_network:
    driver: bridge
