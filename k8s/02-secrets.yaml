---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: smart-contract-rewriter
  labels:
    app.kubernetes.io/name: smart-contract-rewriter
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # Database credentials (base64 encoded)
  # To encode: echo -n "your-password" | base64
  POSTGRES_USER: cG9zdGdyZXM=  # postgres
  POSTGRES_PASSWORD: c2VjdXJlX3Bhc3N3b3JkXzEyMw==  # secure_password_123
  
  # Redis password
  REDIS_PASSWORD: cmVkaXNfcGFzc3dvcmQ=  # redis_password
  
  # JWT Secret Key
  JWT_SECRET_KEY: eW91cl9zdXBlcl9zZWNyZXRfa2V5X2hlcmU=  # your_super_secret_key_here
  
  # Google Gemini API Key
  GEMINI_API_KEY: eW91cl9nZW1pbmlfYXBpX2tleQ==  # your_gemini_api_key
  
  # Database URL
  DATABASE_URL: cG9zdGdyZXNxbDovL3Bvc3RncmVzOnNlY3VyZV9wYXNzd29yZF8xMjNAcG9zdGdyZXMtc2VydmljZTo1NDMyL3NtYXJ0X2NvbnRyYWN0cw==
  # postgresql://postgres:secure_password_123@postgres-service:5432/smart_contracts
---
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
  namespace: smart-contract-rewriter
  labels:
    app.kubernetes.io/name: smart-contract-rewriter
    app.kubernetes.io/component: tls
type: kubernetes.io/tls
data:
  # TLS certificate and key (base64 encoded)
  # Generate with: kubectl create secret tls tls-secret --cert=path/to/tls.crt --key=path/to/tls.key --dry-run=client -o yaml
  tls.crt: LS0tLS1CRUdJTi... # Add your actual certificate here
  tls.key: LS0tLS1CRUdJTi... # Add your actual private key here